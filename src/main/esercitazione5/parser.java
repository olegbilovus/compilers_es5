
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.esercitazione5;

import main.esercitazione5.ast.*;
import main.esercitazione5.ast.nodes.*;
import main.esercitazione5.ast.nodes.expr.*;
import main.esercitazione5.ast.nodes.stat.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\010\005\000\002\010\003\000\002\012" +
    "\005\000\002\012\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\006\014\000\002\006\013\000\002\015" +
    "\007\000\002\015\005\000\002\014\005\000\002\014\003" +
    "\000\002\007\012\000\002\007\011\000\002\007\011\000" +
    "\002\007\010\000\002\016\007\000\002\016\005\000\002" +
    "\017\003\000\002\017\004\000\002\020\004\000\002\020" +
    "\004\000\002\020\003\000\002\020\003\000\002\031\006" +
    "\000\002\031\004\000\002\031\005\000\002\031\005\000" +
    "\002\031\004\000\002\031\005\000\002\031\004\000\002" +
    "\031\005\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\025\004\000\002\025\003\000\002\025\007" +
    "\000\002\025\006\000\002\026\004\000\002\026\003\000" +
    "\002\026\007\000\002\026\006\000\002\022\005\000\002" +
    "\022\003\000\002\027\006\000\002\027\005\000\002\030" +
    "\006\000\002\030\005\000\002\024\005\000\002\024\003" +
    "\000\002\024\006\000\002\024\004\000\002\033\011\000" +
    "\002\033\010\000\002\033\010\000\002\033\007\000\002" +
    "\033\010\000\002\033\007\000\002\033\007\000\002\033" +
    "\006\000\002\036\004\000\002\036\003\000\002\034\006" +
    "\000\002\034\005\000\002\035\004\000\002\035\003\000" +
    "\002\032\007\000\002\032\006\000\002\023\005\000\002" +
    "\023\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\004\000\002\021\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\010\004\005\021\013\026\007\001\002\000" +
    "\004\002\335\001\002\000\004\063\164\001\002\000\012" +
    "\002\ufffc\004\005\021\013\026\007\001\002\000\004\063" +
    "\263\001\002\000\012\002\ufffe\004\005\021\013\026\007" +
    "\001\002\000\012\002\ufffa\004\005\021\013\026\007\001" +
    "\002\000\004\002\001\001\002\000\004\063\014\001\002" +
    "\000\004\024\015\001\002\000\006\025\020\063\016\001" +
    "\002\000\004\006\255\001\002\000\004\025\247\001\002" +
    "\000\004\022\021\001\002\000\012\014\025\015\022\016" +
    "\023\017\026\001\002\000\012\006\uffea\010\uffea\011\uffea" +
    "\025\uffea\001\002\000\012\006\uffe9\010\uffe9\011\uffe9\025" +
    "\uffe9\001\002\000\006\006\uffe2\011\245\001\002\000\012" +
    "\006\uffeb\010\uffeb\011\uffeb\025\uffeb\001\002\000\012\006" +
    "\uffe8\010\uffe8\011\uffe8\025\uffe8\001\002\000\004\006\030" +
    "\001\002\000\022\004\005\020\046\032\042\033\043\035" +
    "\031\036\040\043\033\063\041\001\002\000\010\010\233" +
    "\034\234\064\130\001\002\000\004\007\230\001\002\000" +
    "\024\012\053\013\056\024\054\047\047\062\062\063\061" +
    "\064\052\065\050\066\060\001\002\000\004\010\222\001" +
    "\002\000\004\010\221\001\002\000\004\010\220\001\002" +
    "\000\036\004\005\020\046\023\uffd7\027\uffd7\032\042\033" +
    "\043\035\031\036\040\040\uffd7\041\uffd7\042\uffd7\043\033" +
    "\045\uffd7\063\041\001\002\000\024\012\053\013\056\024" +
    "\054\047\047\062\062\063\061\064\052\065\050\066\060" +
    "\001\002\000\010\007\ufff3\011\150\024\151\001\002\000" +
    "\010\010\146\034\133\064\130\001\002\000\010\010\132" +
    "\034\133\064\130\001\002\000\036\004\005\020\046\023" +
    "\uffd6\027\uffd6\032\042\033\043\035\031\036\040\040\uffd6" +
    "\041\uffd6\042\uffd6\043\033\045\uffd6\063\041\001\002\000" +
    "\004\023\126\001\002\000\024\012\053\013\056\024\054" +
    "\047\047\062\062\063\061\064\052\065\050\066\060\001" +
    "\002\000\024\012\053\013\056\024\054\047\047\062\062" +
    "\063\061\064\052\065\050\066\060\001\002\000\044\010" +
    "\uffa5\011\uffa5\025\uffa5\037\uffa5\044\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000\040\010\uffa7" +
    "\011\123\025\uffa7\046\067\047\064\050\074\051\072\052" +
    "\070\053\075\054\076\055\071\056\073\057\066\060\065" +
    "\061\077\001\002\000\044\010\uffa3\011\uffa3\025\uffa3\037" +
    "\uffa3\044\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\001\002\000\044\010\uffa1\011\uffa1\025\uffa1\037\uffa1" +
    "\044\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\001\002\000\024\012\053\013\056\024\054\047\047\062" +
    "\062\063\061\064\052\065\050\066\060\001\002\000\004" +
    "\010\120\001\002\000\044\010\uffa0\011\uffa0\025\uffa0\037" +
    "\uffa0\044\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\001\002\000\044\010\uffa6\011\uffa6\025\uffa6\037\uffa6" +
    "\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\001\002\000\044\010\uffa4\011\uffa4\025\uffa4\037\uffa4\044" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\001" +
    "\002\000\046\010\uffa2\011\uffa2\024\114\025\uffa2\037\uffa2" +
    "\044\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\001\002\000\024\012\053\013\056\024\054\047\047\062" +
    "\062\063\061\064\052\065\050\066\060\001\002\000\044" +
    "\010\uff92\011\uff92\025\uff92\037\uff92\044\uff92\046\067\047" +
    "\064\050\074\051\072\052\070\053\075\054\076\055\071" +
    "\056\073\057\066\060\065\061\077\001\002\000\024\012" +
    "\053\013\056\024\054\047\047\062\062\063\061\064\052" +
    "\065\050\066\060\001\002\000\024\012\053\013\056\024" +
    "\054\047\047\062\062\063\061\064\052\065\050\066\060" +
    "\001\002\000\024\012\053\013\056\024\054\047\047\062" +
    "\062\063\061\064\052\065\050\066\060\001\002\000\024" +
    "\012\053\013\056\024\054\047\047\062\062\063\061\064" +
    "\052\065\050\066\060\001\002\000\024\012\053\013\056" +
    "\024\054\047\047\062\062\063\061\064\052\065\050\066" +
    "\060\001\002\000\024\012\053\013\056\024\054\047\047" +
    "\062\062\063\061\064\052\065\050\066\060\001\002\000" +
    "\024\012\053\013\056\024\054\047\047\062\062\063\061" +
    "\064\052\065\050\066\060\001\002\000\024\012\053\013" +
    "\056\024\054\047\047\062\062\063\061\064\052\065\050" +
    "\066\060\001\002\000\024\012\053\013\056\024\054\047" +
    "\047\062\062\063\061\064\052\065\050\066\060\001\002" +
    "\000\024\012\053\013\056\024\054\047\047\062\062\063" +
    "\061\064\052\065\050\066\060\001\002\000\024\012\053" +
    "\013\056\024\054\047\047\062\062\063\061\064\052\065" +
    "\050\066\060\001\002\000\024\012\053\013\056\024\054" +
    "\047\047\062\062\063\061\064\052\065\050\066\060\001" +
    "\002\000\044\010\uff9a\011\uff9a\025\uff9a\037\uff9a\044\uff9a" +
    "\046\067\047\064\050\074\051\072\052\070\053\075\054" +
    "\076\055\071\056\073\057\066\060\uff9a\061\uff9a\001\002" +
    "\000\044\010\uff97\011\uff97\025\uff97\037\uff97\044\uff97\046" +
    "\067\047\064\050\074\051\072\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\001\002\000" +
    "\044\010\uff94\011\uff94\025\uff94\037\uff94\044\uff94\046\067" +
    "\047\064\050\074\051\072\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\057\uff94\060\uff94\061\uff94\001\002\000\044" +
    "\010\uff9d\011\uff9d\025\uff9d\037\uff9d\044\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\061\uff9d\001\002\000\044\010" +
    "\uff99\011\uff99\025\uff99\037\uff99\044\uff99\046\067\047\064" +
    "\050\074\051\072\052\uff99\053\uff99\054\uff99\055\uff99\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\001\002\000\044\010\uff9c" +
    "\011\uff9c\025\uff9c\037\uff9c\044\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\001\002\000\044\010\uff96\011" +
    "\uff96\025\uff96\037\uff96\044\uff96\046\067\047\064\050\074" +
    "\051\072\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\001\002\000\044\010\uff95\011\uff95" +
    "\025\uff95\037\uff95\044\uff95\046\067\047\064\050\074\051" +
    "\072\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95" +
    "\060\uff95\061\uff95\001\002\000\044\010\uff9f\011\uff9f\025" +
    "\uff9f\037\uff9f\044\uff9f\046\uff9f\047\uff9f\050\074\051\072" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\001\002\000\044\010\uff98\011\uff98\025\uff98" +
    "\037\uff98\044\uff98\046\067\047\064\050\074\051\072\052" +
    "\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98" +
    "\061\uff98\001\002\000\044\010\uff9b\011\uff9b\025\uff9b\037" +
    "\uff9b\044\uff9b\046\067\047\064\050\074\051\072\052\070" +
    "\053\075\054\076\055\071\056\073\057\066\060\uff9b\061" +
    "\uff9b\001\002\000\044\010\uff9e\011\uff9e\025\uff9e\037\uff9e" +
    "\044\uff9e\046\uff9e\047\uff9e\050\074\051\072\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\001\002\000\026\012\053\013\056\024\054\025\116\047" +
    "\047\062\062\063\061\064\052\065\050\066\060\001\002" +
    "\000\004\025\117\001\002\000\044\010\uffbf\011\uffbf\025" +
    "\uffbf\037\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\001\002\000\044\010\uffc0\011\uffc0\025\uffc0" +
    "\037\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\036\004\uffd3\020\uffd3\023\uffd3\027" +
    "\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\045\uffd3\063\uffd3\001\002\000\034\025" +
    "\122\046\067\047\064\050\074\051\072\052\070\053\075" +
    "\054\076\055\071\056\073\057\066\060\065\061\077\001" +
    "\002\000\044\010\uff93\011\uff93\025\uff93\037\uff93\044\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\001\002" +
    "\000\024\012\053\013\056\024\054\047\047\062\062\063" +
    "\061\064\052\065\050\066\060\001\002\000\006\010\uffa8" +
    "\025\uffa8\001\002\000\044\010\uff91\011\uff91\025\uff91\037" +
    "\uff91\044\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061" +
    "\uff91\001\002\000\012\002\uffe6\004\uffe6\021\uffe6\026\uffe6" +
    "\001\002\000\016\023\uffd8\027\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\045\uffd8\001\002\000\012\010\uffc1\034\uffc1\046\uffc1" +
    "\064\uffc1\001\002\000\004\010\144\001\002\000\036\004" +
    "\uffcf\020\uffcf\023\uffcf\027\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\045\uffcf\063" +
    "\uffcf\001\002\000\004\024\140\001\002\000\012\010\uffc9" +
    "\034\133\046\136\064\130\001\002\000\004\010\uffca\001" +
    "\002\000\004\064\130\001\002\000\012\010\uffc2\034\uffc2" +
    "\046\uffc2\064\uffc2\001\002\000\024\012\053\013\056\024" +
    "\054\047\047\062\062\063\061\064\052\065\050\066\060" +
    "\001\002\000\034\025\142\046\067\047\064\050\074\051" +
    "\072\052\070\053\075\054\076\055\071\056\073\057\066" +
    "\060\065\061\077\001\002\000\010\010\uffc7\034\133\064" +
    "\130\001\002\000\004\010\uffc8\001\002\000\036\004\uffd0" +
    "\020\uffd0\023\uffd0\027\uffd0\032\uffd0\033\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0\063\uffd0" +
    "\001\002\000\004\010\147\001\002\000\036\004\uffd1\020" +
    "\uffd1\023\uffd1\027\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1\063\uffd1\001" +
    "\002\000\036\004\uffd2\020\uffd2\023\uffd2\027\uffd2\032\uffd2" +
    "\033\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\045\uffd2\063\uffd2\001\002\000\004\063\164\001\002" +
    "\000\030\012\053\013\056\024\054\025\155\030\154\047" +
    "\047\062\062\063\061\064\052\065\050\066\060\001\002" +
    "\000\004\025\163\001\002\000\036\011\161\025\uffbb\046" +
    "\067\047\064\050\074\051\072\052\070\053\075\054\076" +
    "\055\071\056\073\057\066\060\065\061\077\001\002\000" +
    "\004\063\156\001\002\000\004\010\uffbd\001\002\000\006" +
    "\011\157\025\uffb9\001\002\000\026\012\053\013\056\024" +
    "\054\030\154\047\047\062\062\063\061\064\052\065\050" +
    "\066\060\001\002\000\004\025\uffba\001\002\000\026\012" +
    "\053\013\056\024\054\030\154\047\047\062\062\063\061" +
    "\064\052\065\050\066\060\001\002\000\004\025\uffbc\001" +
    "\002\000\004\010\uffbe\001\002\000\010\006\ufff3\007\ufff3" +
    "\011\150\001\002\000\006\006\ufff4\007\ufff4\001\002\000" +
    "\034\037\167\046\067\047\064\050\074\051\072\052\070" +
    "\053\075\054\076\055\071\056\073\057\066\060\065\061" +
    "\077\001\002\000\030\004\005\020\046\032\042\033\043" +
    "\035\031\036\040\040\172\041\173\042\175\043\033\063" +
    "\041\001\002\000\006\040\172\041\214\001\002\000\004" +
    "\041\213\001\002\000\024\004\005\020\046\032\042\033" +
    "\043\035\031\036\040\041\uffab\043\033\063\041\001\002" +
    "\000\004\010\uffb1\001\002\000\010\040\uffaf\041\uffaf\042" +
    "\175\001\002\000\024\012\053\013\056\024\054\047\047" +
    "\062\062\063\061\064\052\065\050\066\060\001\002\000" +
    "\010\040\172\041\200\042\175\001\002\000\006\040\172" +
    "\041\203\001\002\000\004\010\uffb5\001\002\000\004\041" +
    "\202\001\002\000\004\010\uffb6\001\002\000\004\010\uffb7" +
    "\001\002\000\004\041\205\001\002\000\004\010\uffb8\001" +
    "\002\000\034\037\207\046\067\047\064\050\074\051\072" +
    "\052\070\053\075\054\076\055\071\056\073\057\066\060" +
    "\065\061\077\001\002\000\030\004\005\020\046\032\042" +
    "\033\043\035\031\036\040\040\uffad\041\uffad\042\uffad\043" +
    "\033\063\041\001\002\000\010\040\uffae\041\uffae\042\uffae" +
    "\001\002\000\006\040\uffb0\041\uffb0\001\002\000\004\041" +
    "\uffac\001\002\000\004\010\uffb2\001\002\000\004\010\uffb3" +
    "\001\002\000\004\041\216\001\002\000\004\010\uffb4\001" +
    "\002\000\016\023\uffd9\027\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\045\uffd9\001\002\000\036\004\uffcc\020\uffcc\023\uffcc\027" +
    "\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\045\uffcc\063\uffcc\001\002\000\036\004" +
    "\uffd4\020\uffd4\023\uffd4\027\uffd4\032\uffd4\033\uffd4\035\uffd4" +
    "\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\063" +
    "\uffd4\001\002\000\036\004\uffcb\020\uffcb\023\uffcb\027\uffcb" +
    "\032\uffcb\033\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\045\uffcb\063\uffcb\001\002\000\034\044\224" +
    "\046\067\047\064\050\074\051\072\052\070\053\075\054" +
    "\076\055\071\056\073\057\066\060\065\061\077\001\002" +
    "\000\024\004\005\020\046\032\042\033\043\035\031\036" +
    "\040\043\033\045\226\063\041\001\002\000\004\045\227" +
    "\001\002\000\004\010\uffa9\001\002\000\004\010\uffaa\001" +
    "\002\000\024\012\053\013\056\024\054\047\047\062\062" +
    "\063\061\064\052\065\050\066\060\001\002\000\004\010" +
    "\232\001\002\000\036\004\uffd5\020\uffd5\023\uffd5\027\uffd5" +
    "\032\uffd5\033\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\045\uffd5\063\uffd5\001\002\000\036\004\uffcd" +
    "\020\uffcd\023\uffcd\027\uffcd\032\uffcd\033\uffcd\035\uffcd\036" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\063\uffcd" +
    "\001\002\000\004\024\241\001\002\000\004\010\240\001" +
    "\002\000\012\010\uffc5\034\234\046\136\064\130\001\002" +
    "\000\004\010\uffc6\001\002\000\036\004\uffce\020\uffce\023" +
    "\uffce\027\uffce\032\uffce\033\uffce\035\uffce\036\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\045\uffce\063\uffce\001\002\000" +
    "\004\063\242\001\002\000\004\025\243\001\002\000\010" +
    "\010\uffc3\034\234\064\130\001\002\000\004\010\uffc4\001" +
    "\002\000\012\014\025\015\022\016\023\017\026\001\002" +
    "\000\004\006\uffe3\001\002\000\004\022\250\001\002\000" +
    "\012\014\025\015\022\016\023\017\026\001\002\000\004" +
    "\006\252\001\002\000\022\004\005\020\046\032\042\033" +
    "\043\035\031\036\040\043\033\063\041\001\002\000\004" +
    "\023\254\001\002\000\012\002\uffe7\004\uffe7\021\uffe7\026" +
    "\uffe7\001\002\000\012\014\025\015\022\016\023\017\026" +
    "\001\002\000\006\011\257\025\uffe4\001\002\000\004\063" +
    "\016\001\002\000\004\025\uffe5\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\uffff\001\002\000\004\024\264\001" +
    "\002\000\010\025\271\031\265\063\266\001\002\000\004" +
    "\063\307\001\002\000\004\006\uffdb\001\002\000\004\025" +
    "\302\001\002\000\004\006\276\001\002\000\004\006\272" +
    "\001\002\000\024\004\005\020\046\027\273\032\042\033" +
    "\043\035\031\036\040\043\033\063\041\001\002\000\012" +
    "\002\uffde\004\uffde\021\uffde\026\uffde\001\002\000\004\027" +
    "\275\001\002\000\012\002\uffdf\004\uffdf\021\uffdf\026\uffdf" +
    "\001\002\000\012\014\025\015\022\016\023\017\026\001" +
    "\002\000\006\011\300\025\uffdc\001\002\000\006\031\265" +
    "\063\266\001\002\000\004\025\uffdd\001\002\000\004\006" +
    "\303\001\002\000\024\004\005\020\046\027\304\032\042" +
    "\033\043\035\031\036\040\043\033\063\041\001\002\000" +
    "\012\002\uffe0\004\uffe0\021\uffe0\026\uffe0\001\002\000\004" +
    "\027\306\001\002\000\012\002\uffe1\004\uffe1\021\uffe1\026" +
    "\uffe1\001\002\000\004\006\uffda\001\002\000\004\002\ufffd" +
    "\001\002\000\006\006\313\007\314\001\002\000\044\002" +
    "\ufff9\004\ufff9\020\ufff9\021\ufff9\023\ufff9\026\ufff9\027\ufff9" +
    "\032\ufff9\033\ufff9\035\ufff9\036\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\045\ufff9\063\ufff9\001\002\000\012\014\025" +
    "\015\022\016\023\017\026\001\002\000\014\012\320\013" +
    "\321\064\315\065\323\066\316\001\002\000\006\010\uffee" +
    "\011\uffee\001\002\000\006\010\uffef\011\uffef\001\002\000" +
    "\004\010\326\001\002\000\006\010\uffed\011\uffed\001\002" +
    "\000\006\010\uffec\011\uffec\001\002\000\006\010\ufff1\011" +
    "\324\001\002\000\006\010\ufff0\011\ufff0\001\002\000\014" +
    "\012\320\013\321\064\315\065\323\066\316\001\002\000" +
    "\004\010\ufff2\001\002\000\006\005\330\063\164\001\002" +
    "\000\044\002\ufff6\004\ufff6\020\ufff6\021\ufff6\023\ufff6\026" +
    "\ufff6\027\ufff6\032\ufff6\033\ufff6\035\ufff6\036\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\043\ufff6\045\ufff6\063\ufff6\001\002\000" +
    "\044\002\ufff5\004\ufff5\020\ufff5\021\ufff5\023\ufff5\026\ufff5" +
    "\027\ufff5\032\ufff5\033\ufff5\035\ufff5\036\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\045\ufff5\063\ufff5\001\002\000\004" +
    "\010\332\001\002\000\006\005\334\063\164\001\002\000" +
    "\044\002\ufff8\004\ufff8\020\ufff8\021\ufff8\023\ufff8\026\ufff8" +
    "\027\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\045\ufff8\063\ufff8\001\002\000\044" +
    "\002\ufff7\004\ufff7\020\ufff7\021\ufff7\023\ufff7\026\ufff7\027" +
    "\ufff7\032\ufff7\033\ufff7\035\ufff7\036\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\045\ufff7\063\ufff7\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\014\002\003\003\011\004\007\006\005\007" +
    "\010\001\001\000\002\001\001\000\006\005\311\010\310" +
    "\001\001\000\012\003\307\004\007\006\005\007\010\001" +
    "\001\000\002\001\001\000\012\003\261\004\007\006\005" +
    "\007\010\001\001\000\012\003\260\004\007\006\005\007" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\023\014\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\036\010\031\020\044\030\034\031\043\032" +
    "\033\033\035\001\001\000\006\022\235\026\234\001\001" +
    "\000\002\001\001\000\006\021\222\027\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\036\010\031\020\216\030\034\031\043\032\033\033" +
    "\035\001\001\000\006\021\165\027\056\001\001\000\002" +
    "\001\001\000\006\022\133\025\144\001\001\000\006\022" +
    "\133\025\130\001\001\000\020\004\036\010\031\020\126" +
    "\030\034\031\043\032\033\033\035\001\001\000\002\001" +
    "\001\000\010\021\050\023\054\027\056\001\001\000\006" +
    "\021\124\027\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\120" +
    "\027\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\062\027\056\001\001\000\002\001\001\000\006\021" +
    "\112\027\056\001\001\000\006\021\111\027\056\001\001" +
    "\000\006\021\110\027\056\001\001\000\006\021\107\027" +
    "\056\001\001\000\006\021\106\027\056\001\001\000\006" +
    "\021\105\027\056\001\001\000\006\021\104\027\056\001" +
    "\001\000\006\021\103\027\056\001\001\000\006\021\102" +
    "\027\056\001\001\000\006\021\101\027\056\001\001\000" +
    "\006\021\100\027\056\001\001\000\006\021\077\027\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\050\023\114\027\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\050\023\123\027" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\133" +
    "\025\134\001\001\000\002\001\001\000\004\022\136\001" +
    "\001\000\002\001\001\000\006\021\140\027\056\001\001" +
    "\000\002\001\001\000\006\022\133\025\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\164\001\001\000" +
    "\010\021\152\024\151\027\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\152\024\157\027\056\001\001" +
    "\000\002\001\001\000\010\021\152\024\161\027\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\036\010" +
    "\031\020\175\030\034\031\043\032\033\033\035\034\173" +
    "\035\170\036\167\001\001\000\004\035\214\001\001\000" +
    "\002\001\001\000\020\004\036\010\031\020\211\030\034" +
    "\031\043\032\033\033\035\001\001\000\002\001\001\000" +
    "\006\034\173\036\210\001\001\000\006\021\205\027\056" +
    "\001\001\000\010\034\173\035\200\036\176\001\001\000" +
    "\004\035\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\036\010\031" +
    "\020\207\030\034\031\043\032\033\033\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\036\010" +
    "\031\020\224\030\034\031\043\032\033\033\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\050\023\230\027\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\235\026\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\235\026\243\001\001\000\002\001\001" +
    "\000\006\013\023\014\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\023\014\250\001\001\000\002" +
    "\001\001\000\020\004\036\010\031\020\252\030\034\031" +
    "\043\032\033\033\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\255\001\001\000\002\001\001\000" +
    "\004\015\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\266\017" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\036\010\031\020\273\030\034\031\043\032\033\033\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\276\001\001\000\002\001\001\000\006" +
    "\016\300\017\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\036\010\031\020\304\030\034\031\043" +
    "\032\033\033\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\330\001" +
    "\001\000\006\011\321\012\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\321\012\324\001\001\000\002\001\001\000\006\005" +
    "\326\010\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\332\010\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Iter 
            {
              ProgramOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Iter i = (Iter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOP(i.getVarDeclOPList(), i.getFunOPList(), i.getProcOPList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOP start_val = (ProgramOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Iter ::= VarDecl Iter 
            {
              Iter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<VarDeclOP> v = (List<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Iter i = (Iter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Iter(v, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Iter ::= VarDecl 
            {
              Iter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<VarDeclOP> v = (List<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Iter(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Iter ::= Function Iter 
            {
              Iter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOP f = (FunOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Iter i = (Iter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Iter(f, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter ::= Function 
            {
              Iter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunOP f = (FunOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Iter(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter ::= Procedure Iter 
            {
              Iter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOP p = (ProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Iter i = (Iter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Iter(p, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter ::= Procedure 
            {
              Iter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOP p = (ProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Iter(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR Decls 
            {
              List<VarDeclOP> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<VarDeclOP> d = (List<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarDeclOP>(); RESULT.addAll(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decls ::= Ids COLON Type SEMI Decls 
            {
              List<VarDeclOP> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<IdNode> ii = (List<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<VarDeclOP> dd = (List<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarDeclOP>(); RESULT.add(new VarDeclOP(ii, t)); RESULT.addAll(dd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              List<VarDeclOP> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<IdNode> ii = (List<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<VarDeclOP>(); RESULT.add(new VarDeclOP(ii, t)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              List<VarDeclOP> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<IdNode> ii = (List<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ConstValue> cc = (List<ConstValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<VarDeclOP> dd = (List<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarDeclOP>(); RESULT.add(new VarDeclOP(ii, cc)); RESULT.addAll(dd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              List<VarDeclOP> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<IdNode> ii = (List<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ConstValue> cc = (List<ConstValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<VarDeclOP>(); RESULT.add(new VarDeclOP(ii, cc)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Ids ::= ID COMMA Ids 
            {
              List<IdNode> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<IdNode> ii = (List<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<IdNode>(); RESULT.add(new IdNode(i)); RESULT.addAll(ii); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID 
            {
              List<IdNode> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<IdNode>(); RESULT.add(new IdNode(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Consts ::= Const COMMA Consts 
            {
              List<ConstValue> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ConstValue> cc = (List<ConstValue>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ConstValue>(); RESULT.add(c); RESULT.addAll(cc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const 
            {
              List<ConstValue> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ConstValue>(); RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= REAL_CONST 
            {
              ConstValue RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstValue(Const.REAL_CONST, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= INTEGER_CONST 
            {
              ConstValue RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstValue(Const.INTEGER_CONST, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= STRING_CONST 
            {
              ConstValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstValue(Const.STRING_CONST, String.valueOf(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= TRUE 
            {
              ConstValue RESULT =null;
		 RESULT = new ConstValue(Const.TRUE, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= FALSE 
            {
              ConstValue RESULT =null;
		 RESULT = new ConstValue(Const.FALSE, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= REAL 
            {
              Type RESULT =null;
		 RESULT = Type.REAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INTEGER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = Type.STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              FunOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<ProcFunParamOP> fp = (List<ProcFunParamOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunOP(new IdNode(i), fp, tt, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Function ::= FUNCTION ID LPAR RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              FunOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunOP(new IdNode(i), null, tt, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncParams ::= ID COLON Type COMMA FuncParams 
            {
              List<ProcFunParamOP> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ProcFunParamOP> ff = (List<ProcFunParamOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ProcFunParamOP>(); RESULT.add(new ProcFunParamOP(ParamAccess.IN, new IdNode(i), t)); RESULT.addAll(ff); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncParams ::= ID COLON Type 
            {
              List<ProcFunParamOP> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ProcFunParamOP>(); RESULT.add(new ProcFunParamOP(ParamAccess.IN, new IdNode(i), t)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Types ::= Type COMMA Types 
            {
              List<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Type>(); RESULT.add(t); RESULT.addAll(tt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Types ::= Type 
            {
              List<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Type>(); RESULT.add(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              ProcOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<ProcFunParamOP> pp = (List<ProcFunParamOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcOP(new IdNode(i), pp, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON ENDPROCEDURE 
            {
              ProcOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<ProcFunParamOP> pp = (List<ProcFunParamOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ProcOP(new IdNode(i), pp, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Procedure ::= PROCEDURE ID LPAR RPAR COLON Body ENDPROCEDURE 
            {
              ProcOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcOP(new IdNode(i), null, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Procedure ::= PROCEDURE ID LPAR RPAR COLON ENDPROCEDURE 
            {
              ProcOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ProcOP(new IdNode(i), null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParams ::= ProcParamId COLON Type COMMA ProcParams 
            {
              List<ProcFunParamOP> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ProcFunParamOP p = (ProcFunParamOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ProcFunParamOP> pp = (List<ProcFunParamOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ProcFunParamOP>(); p.setType(t); RESULT.add(p); RESULT.addAll(pp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ProcParams ::= ProcParamId COLON Type 
            {
              List<ProcFunParamOP> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcFunParamOP p = (ProcFunParamOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ProcFunParamOP>(); p.setType(t); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ProcParamId ::= ID 
            {
              ProcFunParamOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcFunParamOP(ParamAccess.INOUT, new IdNode(i), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ProcParamId ::= OUT ID 
            {
              ProcFunParamOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcFunParamOP(ParamAccess.OUT, new IdNode(i), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Body ::= VarDecl Body 
            {
              BodyOP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<VarDeclOP> v = (List<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.getVarDeclOPList().addAll(0, v); RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= Stat Body 
            {
              BodyOP RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.getStatList().add(0, s); RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= VarDecl 
            {
              BodyOP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<VarDeclOP> v = (List<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BodyOP(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= Stat 
            {
              BodyOP RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BodyOP(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<IdNode> ii = (List<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignOP(ii, ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              Stat RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallProcOP p = (CallProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              Stat RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnOP(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE OArgs SEMI 
            {
              Stat RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOP(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITE SEMI 
            {
              Stat RESULT =null;
		 RESULT = new WriteOP(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= WRITERETURN OArgs SEMI 
            {
              Stat RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOP(ee, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= WRITERETURN SEMI 
            {
              Stat RESULT =null;
		 RESULT = new WriteOP(null, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= READ IArgs SEMI 
            {
              Stat RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadOP(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= READ SEMI 
            {
              Stat RESULT =null;
		 RESULT = new ReadOP(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfOP f = (IfOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOP w = (WhileOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OArgs ::= StringConCat OArgs 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); RESULT.addAll(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OArgs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OArgs ::= StringConCat 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OArgs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OArgs ::= DOLLARSIGN LPAR Expr RPAR OArgs 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); RESULT.addAll(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OArgs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OArgs ::= DOLLARSIGN LPAR Expr RPAR 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OArgs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IArgs ::= StringConCat IArgs 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); RESULT.addAll(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IArgs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IArgs ::= StringConCat 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IArgs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IArgs ::= DOLLARSIGN LPAR ID RPAR IArgs 
            {
              List<Expr> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(new IdNode(i)); RESULT.addAll(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IArgs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IArgs ::= DOLLARSIGN LPAR ID RPAR 
            {
              List<Expr> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(new IdNode(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IArgs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StringConCat ::= StringConCat PLUS StringConCat 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringConCat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StringConCat ::= STRING_CONST 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConstExpr(new ConstValue(Const.STRING_CONST, String.valueOf(i))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringConCat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FunCall ::= ID LPAR Exprs RPAR 
            {
              CallFunOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallFunOP(new IdNode(i), ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FunCall ::= ID LPAR RPAR 
            {
              CallFunOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallFunOP(new IdNode(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              CallProcOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallProcOP(new IdNode(i), ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ProcCall ::= ID LPAR RPAR 
            {
              CallProcOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallProcOP(new IdNode(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); RESULT.addAll(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ProcExprs ::= Expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              List<Expr> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(new IdNode(i, true)); RESULT.addAll(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ProcExprs ::= REF ID 
            {
              List<Expr> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(new IdNode(i, true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int efsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int efsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ElifOP> efs = (List<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseOP els = (ElseOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOP(e, b, efs, els); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IfStat ::= IF Expr THEN Body Elifs ENDIF 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int efsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ElifOP> efs = (List<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOP(e, b, efs, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IfStat ::= IF Expr THEN Body Else ENDIF 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseOP els = (ElseOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOP(e, b, null, els); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IfStat ::= IF Expr THEN Body ENDIF 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOP(e, b, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfStat ::= IF Expr THEN Elifs Else ENDIF 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int efsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int efsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ElifOP> efs = (List<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseOP els = (ElseOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOP(e, null, efs, els); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IfStat ::= IF Expr THEN Elifs ENDIF 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int efsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int efsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ElifOP> efs = (List<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOP(e, null, efs, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IfStat ::= IF Expr THEN Else ENDIF 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseOP els = (ElseOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOP(e, null, null, els); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IfStat ::= IF Expr THEN ENDIF 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfOP(e, null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Elifs ::= Elif Elifs 
            {
              List<ElifOP> RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOP ef = (ElifOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int efsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ElifOP> efs = (List<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ElifOP>(); RESULT.add(ef); RESULT.addAll(efs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Elifs ::= Elif 
            {
              List<ElifOP> RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElifOP ef = (ElifOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ElifOP>(); RESULT.add(ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Elif ::= ELIF Expr THEN Body 
            {
              ElifOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElifOP(e, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Elif ::= ELIF Expr THEN 
            {
              ElifOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ElifOP(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Else ::= ELSE Body 
            {
              ElseOP RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseOP(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Else ::= ELSE 
            {
              ElseOP RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              WhileOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileOP(e, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // WhileStat ::= WHILE Expr DO ENDWHILE 
            {
              WhileOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileOP(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exprs ::= Expr COMMA Exprs 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); RESULT.addAll(ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exprs ::= Expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOP f = (CallFunOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RealConstExpr(new ConstValue(Const.REAL_CONST, c)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerConstExpr(new ConstValue(Const.INTEGER_CONST, c)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConstExpr(new ConstValue(Const.STRING_CONST, String.valueOf(i))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdNode(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueConstExpr(new ConstValue(Const.TRUE, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseConstExpr(new ConstValue(Const.FALSE, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DiffOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MulOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GTOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GEOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LTOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LEOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EQOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eL = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NEOP(eL, eR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; e.setInPar(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotOP(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UminusOP(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
